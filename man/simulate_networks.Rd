% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R_wrapper.R
\name{simulate_networks}
\alias{simulate_networks}
\title{Simulation of networks in parallel based on log/non-log ERGMs}
\usage{
simulate_networks(adjacency = NULL, dim = NULL, theta = c(0, 0, 0),
  n_update = 1e+06, burnin = 1000, n_cores = 4, n_sim = 1,
  log_change = TRUE, return_nw = FALSE)
}
\arguments{
\item{adjacency}{A start matrix for the simulation (default: empty matrix)}

\item{dim}{The dimension of the adjacency matrix as a number (N); either \code{dim} or \code{adjacency} has to be defined}

\item{theta}{A vector with the estimated coefficients of the edge, 2-star and triangle statistic (given in this order)}

\item{n_update}{The number of updates for the Markov chain}

\item{burnin}{The number of burnin which is added to \code{n_update} for the first simulated network}

\item{n_cores}{The number of cores used for parallelization}

\item{n_sim}{The number of simulated networks}

\item{log_change}{True (default) if the log changes of the statistics should be used}

\item{return_nw}{False (default) if only statistics instead of complete simulated networks should be returned}
}
\value{
A matrix with the number of edges, 2-stars and triangles of each simulated network
}
\description{
Simulates networks based on log/non-log exponential random graph models (ERGMs).
Simulation can be done in parallel. Used network statistics (number of edges, 2-stars and triangles)
induce a conditional independence structure amongst the edges of the network.
}
\details{
For simulating networks in parallel we start a single Markov chain simulation but apply parallel computing for each single step of the Markov chain. The central idea is to take advantage of the conditional independence structure and simulate multiple conditionally independent edges in networks simultaneously in parallel.
The returned statistics consist of the number of edges, 2-stars and triangles of each simulated network. If \code{log_change} is true, the log transformed statistics are returned. The log transformation provides a concave function such that linearity and degeneracy problems diminishes.
The algorithm is implemented in C++ and the parallelization works in C++ via OpenMP (Open Multi-Processing).
}
\examples{
# number of nodes
N <- 10
# the given parameter vector of edges, 2-star and triangle
theta <- c(-2, 0.01, -0.2)
# simulate one network with an empty adjacency matrix as start
network_stats <- simulate_networks(dim = N, theta = theta, log_change = TRUE)

}
\references{
Maier, V., FÃ¼rlinger, K., Kauermann G. (2016). A Note on Parallel Sampling in Exponential Random Graph Models (ERGM) \cr (to appear)
}

